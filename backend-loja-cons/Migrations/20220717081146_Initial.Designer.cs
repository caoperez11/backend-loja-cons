// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend_loja_cons;

#nullable disable

namespace backend_loja_cons.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220717081146_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend_loja_cons.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorreoPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelefonoPrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("integer");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Informacion");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Banners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int>("TipoBanner")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Contactos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int>("TipoContacto")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Correos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<string>("TipoCorreo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoOficina")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Correos");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Direcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barrio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CallePrincipal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CalleSecundaria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoOficina")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Logos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int>("TipoLogo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Objetivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Objetivos");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+RedesSociales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRedSocial")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("RedesSociales");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Valores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Valores");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MarcaId")
                        .HasColumnType("integer");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("integer");

                    b.Property<int>("Valoracion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto+Caracteristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int?>("ValorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ValorId");

                    b.ToTable("Caracteristica");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto+Detalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int?>("ValorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ValorId");

                    b.ToTable("Detalle");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Categoria", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Producto", null)
                        .WithMany("ProductosCategorias")
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Banners", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaImagenes")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Contactos", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaTelefonos")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Correos", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaCorreos")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Direcciones", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaDirecciones")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Logos", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaLogos")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Objetivos", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaObjetivos")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+RedesSociales", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaRedesSociales")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa+Valores", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Empresa", null)
                        .WithMany("ListaValores")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto+Caracteristica", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Producto", null)
                        .WithMany("Caracteristicas")
                        .HasForeignKey("ProductoId");

                    b.HasOne("backend_loja_cons.Entities.Producto+Caracteristica", "Valor")
                        .WithMany()
                        .HasForeignKey("ValorId");

                    b.Navigation("Valor");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto+Detalle", b =>
                {
                    b.HasOne("backend_loja_cons.Entities.Producto", null)
                        .WithMany("Detalles")
                        .HasForeignKey("ProductoId");

                    b.HasOne("backend_loja_cons.Entities.Producto+Detalle", "Valor")
                        .WithMany()
                        .HasForeignKey("ValorId");

                    b.Navigation("Valor");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Empresa", b =>
                {
                    b.Navigation("ListaCorreos");

                    b.Navigation("ListaDirecciones");

                    b.Navigation("ListaImagenes");

                    b.Navigation("ListaLogos");

                    b.Navigation("ListaObjetivos");

                    b.Navigation("ListaRedesSociales");

                    b.Navigation("ListaTelefonos");

                    b.Navigation("ListaValores");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("backend_loja_cons.Entities.Producto", b =>
                {
                    b.Navigation("Caracteristicas");

                    b.Navigation("Detalles");

                    b.Navigation("ProductosCategorias");
                });
#pragma warning restore 612, 618
        }
    }
}
